- content_for :javascripts do
  = javascript_include_tag "leaflet"
  = javascript_include_tag "leaflet.label"
  = javascript_include_tag "jquery-ui-slider.min"
  = javascript_include_tag "jquery.address.min"
  = javascript_include_tag "jenks"

  :javascript
    $(window).resize(function () {
      var h = $(window).height(),
      offsetTop = 100; // Calculate the top offset
      $('#map').css('height', (h - offsetTop));
    }).resize();
    // hiding and modifying elements to give the map more room
    $('#container-primary').attr("class", "container-fluid");
    $('.footer').hide();
    
    $('.accordion-group').on('show.bs.collapse', function () {
      $(this).find('.plus-minus').attr('class', 'fa fa-minus-circle plus-minus')
    })
    
    $('.accordion-group').on('hide.bs.collapse', function () {
      $(this).find('.plus-minus').attr('class', 'fa fa-plus-circle plus-minus')
    })
    
    // initialize the map
    var map = L.map('map', {scrollWheelZoom:false}).setView([41.86, -87.70], 11);
    
    var mapbox = L.tileLayer('https://{s}.tiles.mapbox.com/v3/smartchicagocollaborative.heooddo8/{z}/{x}/{y}.png', {attribution: '<a href="http://www.mapbox.com/about/maps/" target="_blank">Terms &amp; Feedback</a>'}).addTo(map);
    map.attributionControl.setPrefix('');
    
    var geojsonFeature = #{@display_geojson};
    var geojson;
    var allLayers = [];
    
    // control that shows info on hover
    var info = L.control();
    
    info.onAdd = function (map) {
        this._div = L.DomUtil.create('div', 'info');
        this.update();
        return this._div;
    };
    
    function resetHighlight(e) {
        geojson.resetStyle(e.target);
    }
    
    function highlightFeature(e) {
        console.log(1);
        var layer = e.target;
        
        layer.setStyle({
            weight: 5,
            color: '#666',
            dashArray: '',
            fillOpacity: 0.7
        });
        
        if (!L.Browser.ie && !L.Browser.opera) {
            layer.bringToFront();
        }
    }

  - if @landing
    :javascript
        // plain map with no data or colors
        geojson = L.geoJson(geojsonFeature, {
            style: style,
            onEachFeature: onEachFeature
        }).addTo(map);
                
        for(layer in allLayers){
            var props = allLayers[layer].feature.properties;
            allLayers[layer].bindLabel( '<h4>' + props.name + '</h4>');
        }
        
        function style(feature) {
            return {
                fillColor: '#6BAED6',
                weight: 2,
                opacity: 1,
                color: 'white',
                dashArray: '3',
                fillOpacity: 0.7
            };
        }
        
        function onEachFeature(feature, layer) {
            layer.on({
                mouseover: highlightFeature,
                mouseout: resetHighlight,
                click: linkToDetail
            });
            allLayers.push(layer);
        }
        
        function linkToDetail(e) {
            window.location = '/place/' + e.target.feature.properties.slug + '#{@detail_url_fragment}';
        }

  - else
    :javascript
        // map with data
        var jenks_cutoffs = jenks(#{@current_statistics}, 4);
        jenks_cutoffs[0] = 0; // ensure the bottom value is 0
        jenks_cutoffs.pop(); // last item is the max value, so dont use it
        var map_colors = #{@map_colors}
        
        // get color depending on condition_title
        function getColor(d) {
            return  d >= jenks_cutoffs[3] ? map_colors[0] : 
                    d >= jenks_cutoffs[2] ? map_colors[1] : 
                    d >= jenks_cutoffs[1] ? map_colors[2] : 
                    d >= jenks_cutoffs[0] ? map_colors[3] :  
                                            map_colors[4];
        }
        
        function style(feature) {
            return {
                fillColor: getColor(feature.properties.condition_value[active_year]),
                weight: 2,
                opacity: 1,
                color: 'white',
                dashArray: '3',
                fillOpacity: 0.7
            };
        }
        
        function onEachFeature(feature, layer) {
            layer.on({
                mouseover: highlightFeature,
                mouseout: resetHighlight,
                click: linkToDetail
            });
            allLayers.push(layer);
        }
        
        function linkToDetail(e) {
            window.location = '/place/' + e.target.feature.properties.slug + '##{@current_dataset_slug}';
        }
        
        geojson = L.geoJson(geojsonFeature, {
            style: style,
            onEachFeature: onEachFeature
        }).addTo(map);
        
        var percentSuffix = '';
        if (allLayers[0].feature.properties.stat_type.indexOf("percent") !== -1) percentSuffix = '%';
        
        function update_year(year){
            active_year = year;
            $.address.parameter('year', active_year);
            var year_range = allLayers[0].feature.properties.condition_year_range;
            if (year_range != '')
                $("#year_label").text(year_range);
            else
        	    $("#year_label").text(year);
            
            for(layer in allLayers){
                var props = allLayers[layer].feature.properties;
                allLayers[layer].bindLabel( '<h4>' + props.name + '</h4>' + props.condition_title + ': ' + props.condition_value[ year ] + percentSuffix);
                allLayers[layer].setStyle({fillColor: getColor(props.condition_value[year])});
            }
        }
        
        var start_year = #{@current_dataset_start_year};
        var end_year = #{@current_dataset_end_year};
        
        $('#start_year').html(start_year);
        $('#end_year').html(end_year);
        
        if(start_year == end_year){
          // only one year in system - remove slider
          $("#slider, #start_year, #end_year").css({
            display: "none"
          });
        }
        
        var active_year = end_year;
        if ($.address.parameter('year') != null)
            active_year = $.address.parameter('year');
        
        update_year(active_year);
        
        $("#slider").slider({
          min: start_year,
          max: end_year,
          step: 1,
          value: active_year,
          slide: function(event, ui){
            update_year(ui.value);
          },
          change: function(event, ui){
            update_year(ui.value);
          },
          range: "min"
        });
        
        var legend = L.control({position: 'topright'});
        
        legend.onAdd = function (map) {
          
            var div = L.DomUtil.create('div', 'info legend'),
                grades = jenks_cutoffs,
                labels = [],
                from, to;
                
            for (var i = 0; i < grades.length; i++) {
                from = grades[i];
                to = grades[i + 1];
                
                labels.push(
                    '<i style="background:' + getColor(from + 0.01) + '"></i> ' +
                    from + (to ? '&ndash;' + to + percentSuffix : percentSuffix + '+'));
            }
            
            div.innerHTML = "<strong>#{@current_dataset_name}</strong><br>" + labels.join('<br>');
            return div;
        };
        
        legend.addTo(map);
        
        $.address.externalChange(function(event) {
            update_year($.address.parameter('year'));
            $('#slider').slider('value', $.address.parameter('year'));
        });

.row-fluid
  .span5
    %h2 Chicago Statistics

    #map_sidebar

      %h4 Conditions
      #view_accordion.accordion
        - @condition_categories.each do |c|
          = render :partial => "home/map_category", :locals => {:accordion_name => 'view_accordion', :category => c, :link_color => GlobalConstants::BLUES.first}

      %h4 Resources
      #resources_accordion.accordion
        .accordion-group
          .accordion-heading
            %a.accordion-toggle{:href => "/map/affordable_resources", :style => "color: #{GlobalConstants::ORANGES.second}"} Affordable resources

      %h4 Health Insurance
      #insurance_accordion.accordion
        - @uninsured_categories.each do |c|
          = render :partial => "home/map_category", :locals => {:accordion_name => 'insurance_accordion', :category => c, :link_color => GlobalConstants::GREENS.first}

      %h4 Hospital Admissions
      #hosp_admission_accordion.accordion
        - @hosp_admissions_categories.each do |c|
          = render :partial => "home/map_category", :locals => {:accordion_name => 'hosp_admission_accordion', :category => c, :link_color => GlobalConstants::BLUES.first}

      %h4 Other
      #stats_accordion.accordion
        = render :partial => "home/map_category", :locals => {:accordion_name => 'stats_accordion', :category => Category.find_by_name("Demographics"), :link_color => GlobalConstants::REDS.first}
        = render :partial => "home/map_category", :locals => {:accordion_name => 'stats_accordion', :category => Category.find_by_name("Healthcare Providers"), :link_color => GlobalConstants::PURPLES.first}
        = render :partial => "home/map_category", :locals => {:accordion_name => 'stats_accordion', :category => Category.find_by_name("Dentists"), :link_color => GlobalConstants::ORANGES.third}


  .span7
    %br
    #map_sidebar_header
      - if @landing
        - title 'Browse by neighborhood'
        %h4
          Select a dataset to visualize it on the map.<br>
        %small
          Examples: <a href='/map/births_birth_rate'>birth rate</a>, <a href='/map/crime_aggravated_assault'>aggravated battery</a>, or <a href='/map/infectious_disease_tuberculosis'>tuberculosis</a>.
        
      - else
        - title 'Browse ' + @current_dataset_name
        %h4
          #{@current_dataset_name}
          %small#year_label
        .span10{ :style => "margin-left: 0"}
          %div{ :id => "slider" }
          %strong.pull-left#start_year
          %strong.pull-right#end_year
        .clearfix
        %p 
          %small #{@current_dataset_description}
          - if @current_dataset_url != ''
            = raw(render_source_links(@current_dataset_provider, @current_dataset_url, @current_dataset_slug+".csv", true))
        
    %br
    #map
  